#!/bin/bash
set -e

source $SCRIPTPATH/config/variables.cfg
source $SCRIPTPATH/config/functions.cfg

function install {
  
  check_variables

  NUMBEROFNODES=0
  # Check if USE_AUTO_NODE_CONFIG is set to true 
  if [ "$USE_AUTO_NODE_CONFIG" = "true" ]; then
    NUMBEROFNODES=$NODE_NUMBER
  else
    read -p "How many nodes do you want to run on the MultiversX $ATTENTION ? : " NUMBEROFNODES
    re='^[0-9]+$'
    if ! [[ $NUMBEROFNODES =~ $re ]] && [ "$NUMBEROFNODES" -gt 0 ]
    then
      NUMBEROFNODES=1
    fi
  fi


  prerequisites
  #Keep track of how many nodes you've started on the machine
  echo "$NUMBEROFNODES" > $CUSTOM_HOME/.numberofnodes
  #Keep track of the environment used to launch nodes on the machine
  echo "$ENVIRONMENT" > $CUSTOM_HOME/.installedenv
  paths
  go_lang
  #If repos are present and you run install again this will clean up for you
  if [ -d "$GOPATH/src/github.com/multiversx/mx-chain-go" ]; then echo -e "${RED}--> Repos present. Either run the upgrade command or cleanup & install again...${NC}"; echo -e; exit; fi
  mkdir -p $GOPATH/src/github.com/multiversx
  check_api_limit
  git_clone
  build_node
  build_keygen
  install_utils
  #Run the install process for each node
  for i in $(seq 1 $NUMBEROFNODES); 
  do 
    INDEX=$(( $i - 1 ))
    WORKDIR="$CUSTOM_HOME/elrond-nodes/node-$INDEX"
    install_files         
    node_name ${NODE_NAMES[INDEX]} ${NODE_REDUNDANCIES[INDEX]}
    keys
    systemd
  done
  sudo chown -R $CUSTOM_USER: $CUSTOM_HOME/elrond-nodes

}

function add_node {

#Check if the same env is used
env_change_check
#Check if running observing squad
if [ -e /etc/systemd/system/elrond-proxy.service ]; then echo -e "${RED}--> You are running in the OBSERVING SQUAD configuration. Further nodes cannot be added.${NC}"; echo -e; exit; fi
#Backup the current number of nodes
cp -f $CUSTOM_HOME/.numberofnodes $CUSTOM_HOME/.numberofnodes_orig
NUMBEROFNODES_ORIG=$(cat $CUSTOM_HOME/.numberofnodes_orig)
echo -e
echo -e "${GREEN}You are currently running ${CYAN}$NUMBEROFNODES_ORIG${GREEN} node(s) on ${CYAN}$HOSTNAME${GREEN}...${NC}"
echo -e
#Ask how many nodes to add
read -p "How many nodes do you want to add to the MultiversX $ATTENTION ? (default 1): " NUMBEROFNODES_NEW
  re='^[0-9]+$'
  if ! [[ $NUMBEROFNODES_NEW =~ $re ]] || [ "$NUMBEROFNODES_NEW" -eq 0 ]
  then
      NUMBEROFNODES_NEW=1
  fi
#Update the total number of nodes
NUMBEROFNODES_TOTAL=$(($NUMBEROFNODES_ORIG + $NUMBEROFNODES_NEW))
echo -e
echo -e "${GREEN}After this operation you will have ${CYAN}$NUMBEROFNODES_TOTAL${GREEN} nodes.${NC}"
echo -e
#Start a fresh build process for the new nodes
paths
#If repos are present and you run install again this will clean up for you
  if [ -d "$GOPATH/src/github.com/multiversx" ]; then sudo rm -rf $GOPATH/src/github.com/multiversx/*; fi
  mkdir -p $GOPATH/src/github.com/multiversx
  check_api_limit
  git_clone
  build_node
  build_keygen
#Run the install process for each new node to be added
  for INDEX in $(seq $NUMBEROFNODES_ORIG $(( $NUMBEROFNODES_TOTAL - 1 )) ); do
    WORKDIR="$CUSTOM_HOME/elrond-nodes/node-$INDEX"
    install_files
    node_name
    keys
    systemd
  done
#Update the file that tracks the total number of running
  echo "$NUMBEROFNODES_TOTAL" > $CUSTOM_HOME/.numberofnodes

}

function observers {
  
  NUMBEROFNODES=4
  check_variables
  prerequisites
  #Keep track of how many nodes you've started on the machine
  echo "$NUMBEROFNODES" > $CUSTOM_HOME/.numberofnodes
  #Keep track of the environment used to launch nodes on the machine
  echo "$ENVIRONMENT" > $CUSTOM_HOME/.installedenv
  paths
  go_lang
  #If repos are present and you run install again this will clean up for you :D
  if [ -d "$GOPATH/src/github.com/multiversx/mx-chain-go" ]; then echo -e "${RED}--> Repos present. Either run the upgrade command or cleanup & install again...${NC}"; echo -e; exit; fi
  mkdir -p $GOPATH/src/github.com/multiversx
  check_api_limit
  git_clone
  check_api_limit
  git_clone_proxy
  build_node
  build_keygen
  install_utils
  #Run the install process for each observer
  for i in $(seq 1 $NUMBEROFNODES); 
        do 
         INDEX=$(( $i - 1 ))
         WORKDIR="$CUSTOM_HOME/elrond-nodes/node-$INDEX"
         install_files
         node_name
         observer_keys
         systemd
         sed -i '/\[DbLookupExtensions\]/!b;n;c\\tEnabled = true' $WORKDIR/config/config.toml
         if [[ "$INDEX" == 3 ]]; then
                       sed -i 's/DestinationShardAsObserver = "disabled"/DestinationShardAsObserver = "metachain"/' $WORKDIR/config/prefs.toml
                  else 
                  sed -i 's/DestinationShardAsObserver = "disabled"/DestinationShardAsObserver = "'$INDEX'"/' $WORKDIR/config/prefs.toml
            fi
       done
  sudo chown -R $CUSTOM_USER: $CUSTOM_HOME/elrond-nodes
  
  #Install & configure elrond-proxy
  elrond_proxy
  proxy_config

}

function upgrade {
  
  paths
  go_lang
  compare_config_versions
  #Check if env file exists
  env_file_check
  #Check if the same env is used
  env_change_check

  echo -e 
  read -p "Do you want to go on with the upgrade (Default No) ? (Yy/Nn)" yn
  echo -e
  
  case $yn in
      [Yy]* )
      #Remove previously cloned repos
      if [ -d "$GOPATH/src/github.com/multiversx" ]; then sudo rm -rf $GOPATH/src/github.com/multiversx/*; echo -e; echo -e "${RED}--> Repos present. Removing and fetching again...${NC}"; echo -e; fi
          check_api_limit
          git_clone
          build_node
          build_keygen
      if [ -d "$CUSTOM_HOME/elrond-utils" ]; then rm -rf $CUSTOM_HOME/elrond-utils; mkdir -p $CUSTOM_HOME/elrond-utils; fi
          install_utils
  
      INSTALLEDNODES=$(cat $CUSTOM_HOME/.numberofnodes)

      #Run the update process for each node
      for i in $(seq 1 $INSTALLEDNODES);
            do
              UPDATEINDEX=$(( $i - 1 ))
              UPDATEWORKDIR="$CUSTOM_HOME/elrond-nodes/node-$UPDATEINDEX"
              cp -f $UPDATEWORKDIR/config/prefs.toml $UPDATEWORKDIR/config/prefs.toml.save

              sudo systemctl stop elrond-node-$UPDATEINDEX
              update
              mv $UPDATEWORKDIR/config/prefs.toml.save $UPDATEWORKDIR/config/prefs.toml
              echo -e
              echo -e "${CYAN}--> elrond-node-$UPDATEINDEX upgraded. Don't forget to start it...${NC}"
              echo -e
            done
        ;;
            
      [Nn]* )
      echo -e "${GREEN}Fine ! Skipping upgrade on this machine...${NC}"
        ;;
            
      * )
      echo -e "${GREEN}I'll take that as a no then... moving on...${NC}"
        ;;
  esac

}

function upgrade_squad {
  
  paths
  go_lang
  compare_config_versions
  #Check if env file exists
  env_file_check
  #Check if the same env is used
  env_change_check

  echo -e 
  read -p "Do you want to go on with the upgrade (Default No) ? (Yy/Nn)" yn
  echo -e
  
    case $yn in
        [Yy]* )
        #Remove previously cloned repos
        if [ -d "$GOPATH/src/github.com/multiversx" ]; then sudo rm -rf $GOPATH/src/github.com/multiversx/*; echo -e; echo -e "${RED}--> Repos present. Removing and fetching again...${NC}"; echo -e; fi
            check_api_limit
            git_clone
            build_node
            build_keygen
        if [ -d "$CUSTOM_HOME/elrond-utils" ]; then rm -rf $CUSTOM_HOME/elrond-utils; mkdir -p $CUSTOM_HOME/elrond-utils; fi
            install_utils
  
        INSTALLEDNODES=$(cat $CUSTOM_HOME/.numberofnodes)  
        #Run the update process for each node
        for i in $(seq 1 $INSTALLEDNODES);
              do
                UPDATEINDEX=$(( $i - 1 ))
                UPDATEWORKDIR="$CUSTOM_HOME/elrond-nodes/node-$UPDATEINDEX"
                cp -f $UPDATEWORKDIR/config/prefs.toml $UPDATEWORKDIR/config/prefs.toml.save
        
                sudo systemctl stop elrond-node-$UPDATEINDEX
                update
                mv $UPDATEWORKDIR/config/prefs.toml.save $UPDATEWORKDIR/config/prefs.toml
                sed -i '/\[DbLookupExtensions\]/!b;n;c\\tEnabled = true' $UPDATEWORKDIR/config/config.toml
                echo -e
                echo -e "${CYAN}--> elrond-node-$UPDATEINDEX upgraded. Don't forget to start it...${NC}"
                echo -e
              done
          ;;
            
        [Nn]* )
        echo -e "${GREEN}Fine ! Skipping upgrade on this machine...${NC}"
          ;;
            
        * )
        echo -e "${GREEN}I'll take that as a no then... moving on...${NC}"
          ;;
    esac

}

function upgrade_proxy {
  
  paths
  go_lang
  echo -e
  echo -e "${GREEN}This option will rebuild your proxy from the code of the latest release on github.${NC}"
  echo -e
  read -p "Do you want to go on with the upgrade (Default No) ? (Yy/Nn)" yn
  echo -e

  case $yn in
       [Yy]* )
         #Remove previously cloned repo
         if [ -d "$GOPATH/src/github.com/multiversx/mx-chain-proxy-go" ]; then sudo rm -rf $GOPATH/src/github.com/multiversx/mx-chain-proxy-go; echo -e; echo -e "${RED}--> Repo present. Removing and fetching again...${NC}"; echo -e; fi
           check_api_limit
           git_clone_proxy
           pidof proxy >/dev/null && sudo service elrond-proxy stop
           #Remove old proxy folder & service
           if [ -e /etc/systemd/system/elrond-proxy.service ]; then sudo rm /etc/systemd/system/elrond-proxy.service; fi
           sudo systemctl daemon-reload
           if [ -d $CUSTOM_HOME/elrond-proxy/ ]; then sudo rm -rf $CUSTOM_HOME/elrond-proxy/; fi
           
           #Rebuild the proxy & run the config for it again
           elrond_proxy
           proxy_config

           #Restart the new proxy
           sudo systemctl start elrond-proxy
          ;;
    
        [Nn]* )
          echo -e "${GREEN}Fine ! Skipping proxy upgrade on this machine...${NC}"
          ;;
    
        * )
          echo -e "${GREEN}I'll take that as a no then... moving on...${NC}"
          ;;
    esac
}

function remove_db {

  paths
  echo -e
  echo -e "${RED}This action will completly erase the DBs and logs of your nodes !${NC}"  
  echo -e 
  read -p "Do you want to go on with the DB erase (Default No) ? (Yy/Nn)" yn
  echo -e
  case $yn in
       [Yy]* )
         INSTALLEDNODES=$(cat $CUSTOM_HOME/.numberofnodes)
         #Run the cleaning process for each node
         for i in $(seq 1 $INSTALLEDNODES);
             do
               UPDATEINDEX=$(( $i - 1 ))
               UPDATEWORKDIR="$CUSTOM_HOME/elrond-nodes/node-$UPDATEINDEX"
               
               echo -e "${GREEN}Stopping MultiversX Node-$UPDATEINDEX binary...${NC}"
               
               sudo systemctl stop elrond-node-$UPDATEINDEX
               cleanup_files

               echo -e "${CYAN}--> elrond-node-$UPDATEINDEX DB deleted. Don't forget to start the node...${NC}"
               echo -e
           done
            ;;
            
       [Nn]* )
          echo -e "${GREEN}Fine ! Skipping DB cleanup on this machine...${NC}"
            ;;
            
           * )
           echo -e "${GREEN}I'll take that as a no then... moving on...${NC}"
            ;;
      esac  

}

function start {

  #Check if the same env is used
  env_file_check
  env_change_check

  echo -e
  read -p "Do you want to start all nodes ? (Yy/Nn)" yn
  echo -e

  NODESTOSTART=$(cat $CUSTOM_HOME/.numberofnodes)

  case $yn in
       [Yy]* )
          for i in $(seq 1 $NODESTOSTART);
              do
                STARTINDEX=$(( $i - 1 ))
                echo -e
                echo -e "${GREEN}Starting MultiversX Node-$STARTINDEX binary on host ${CYAN}$HOST${GREEN}...${NC}"
                echo -e
                sudo systemctl start elrond-node-$STARTINDEX
              done
  
          proxy_start
            ;;
            
       [Nn]* )
          #Choose which nodes to start
          running_services
          read -p "Choose which node(s) to start (comma separated IDs: 0,1,2... ): " CUSTOM_NODESTOSTART
          
          if [ "$CUSTOM_NODESTOSTART" = "" ]; then echo -e "No nodes chosen for start. Exiting..."; echo -e; exit; fi

          for NODEID_START in $(echo $CUSTOM_NODESTOSTART | sed "s/,/ /g")
              do
                echo -e
                echo -e "${GREEN}Starting MultiversX Node-$NODEID_START binary on host ${CYAN}$HOST${GREEN}...${NC}"
                echo -e
                sudo systemctl start elrond-node-$NODEID_START
              done

          proxy_start
            ;;

           * )
           echo -e "${GREEN}You have to either choose Yy or Nn... exiting...${NC}"
            ;;
      esac  

}

function stop {

  echo -e
  read -p "Do you want to stop all nodes ? (Yy/Nn)" yn
  echo -e

  NODESTOSTOP=$(cat $CUSTOM_HOME/.numberofnodes)
  
  case $yn in
       [Yy]* )
          for i in $(seq 1 $NODESTOSTOP);
      do
        STOPINDEX=$(( $i - 1 ))
        echo -e
        echo -e "${GREEN}Stopping MultiversX Node-$STOPINDEX binary on host ${CYAN}$HOST${GREEN}...${NC}"
        echo -e
        sudo systemctl stop elrond-node-$STOPINDEX
      done
  
          proxy_stop
            ;;
            
       [Nn]* )
          #Choose which nodes to stop
          running_services
          read -p "Choose which node(s) to stop (comma separated IDs: 0,1,2... ): " CUSTOM_NODESTOSTOP
          
          if [ "$CUSTOM_NODESTOSTOP" = "" ]; then echo -e "No nodes chosen for stopping. Exiting..."; echo -e; exit; fi

          for NODEID_STOP in $(echo $CUSTOM_NODESTOSTOP | sed "s/,/ /g")
              do
                echo -e
                echo -e "${GREEN}Stopping MultiversX Node-$NODEID_STOP binary on host ${CYAN}$HOST${GREEN}...${NC}"
                echo -e
                sudo systemctl stop elrond-node-$NODEID_STOP
              done

          proxy_stop
            ;;

           * )
           echo -e "${GREEN}You have to either choose Yy or Nn... exiting...${NC}"
            ;;
      esac

}

function cleanup {
  
  paths
  echo -e 
  read -p "Do you want to delete installed nodes (Default No) ? (Yy/Nn)" yn
  echo -e
  case $yn in
       [Yy]* )
          echo -e "${RED}OK ! Cleaning everything !${NC}"
          
          if [[ -f $CUSTOM_HOME/.numberofnodes ]]; then
            NODESTODESTROY=$(cat $CUSTOM_HOME/.numberofnodes)
                for i in $(seq 1 $NODESTODESTROY);
                    do
                        KILLINDEX=$(( $i - 1 ))
                          echo -e
                          echo -e "${GREEN}Stopping MultiversX Node-$KILLINDEX binary on host ${CYAN}$HOST${GREEN}...${NC}"
                          echo -e
                          if [ -e /etc/systemd/system/elrond-node-$KILLINDEX.service ]; then sudo systemctl stop elrond-node-$KILLINDEX; fi
                          echo -e "${GREEN}Erasing unit file and node folder for MultiversX Node-$KILLINDEX...${NC}"
                          echo -e
                          if [ -e /etc/systemd/system/elrond-node-$KILLINDEX.service ]; then sudo rm /etc/systemd/system/elrond-node-$KILLINDEX.service; fi
                          if [ -d $CUSTOM_HOME/elrond-nodes/node-$KILLINDEX ]; then sudo rm -rf $CUSTOM_HOME/elrond-nodes/node-$KILLINDEX; fi
                    done
          fi
          
            #Stop and remove the elrond-proxy service if present
            if [ -e /etc/systemd/system/elrond-proxy.service ]; then sudo systemctl stop elrond-proxy; fi
            if [ -e /etc/systemd/system/elrond-proxy.service ]; then sudo rm /etc/systemd/system/elrond-proxy.service; fi
            if [ -d $CUSTOM_HOME/elrond-proxy/ ]; then sudo rm -rf $CUSTOM_HOME/elrond-proxy/; fi
            #Reload systemd after deleting node units
            sudo systemctl daemon-reload

            echo -e
            echo -e "${GREEN}Removing elrond utils...${NC}"
            echo -e      
            if ps -all | grep -q termui; then killall termui; sleep 2; fi
            if [[ -e $CUSTOM_HOME/elrond-utils/termui ]]; then rm $CUSTOM_HOME/elrond-utils/termui; fi
              
            if ps -all | grep -q logviewer; then killall logviewer; sleep 2; fi
            if [[ -e $CUSTOM_HOME/elrond-utils/logviewer ]]; then rm $CUSTOM_HOME/elrond-utils/logviewer; fi
            
            #Delete nodes and utils folders
            rm -rf $CUSTOM_HOME/elrond-utils && rm -rf $CUSTOM_HOME/elrond-nodes
            
            echo -e "${GREEN}Removing paths from .profile on host ${CYAN}$HOST${GREEN}...${NC}"
            echo -e
            sed -i 'N;$!P;$!D;$d' ~/.profile
            
            if [ -e $CUSTOM_HOME/.numberofnodes ]; then rm $CUSTOM_HOME/.numberofnodes; fi
            if [ -e $CUSTOM_HOME/.numberofnodes_orig ]; then rm $CUSTOM_HOME/.numberofnodes_orig; fi
            if [ -e $CUSTOM_HOME/.installedenv ]; then rm $CUSTOM_HOME/.installedenv; fi

            echo -e "${GREEN}Removing cloned mx-chain-go & configs repos from host ${CYAN}$HOST${GREEN}...${NC}"
            echo -e      
            if [ -d "$GOPATH/src/github.com/multiversx/mx-chain-go" ]; then sudo rm -rf $GOPATH/src/github.com/multiversx/mx-chain-*; fi
            #Also remove old ElrondNetwork folder if still present
            if [ -d "$GOPATH/src/github.com/ElrondNetwork" ]; then sudo rm -rf $GOPATH/src/github.com/ElrondNetwork; fi
            #-----------------------------------------------------
            if [ -d "$GOPATH/pkg" ]; then sudo rm -rf $GOPATH/pkg; fi
            WASM_ARCH=$(dpkg --print-architecture)
            if [ -e /lib/libwasmer_linux_$WASM_ARCH.so ]; then sudo rm /lib/libwasmer_linux_$WASM_ARCH.so; fi
            ;;
            
       [Nn]* )
          echo -e "${GREEN}Fine ! Skipping cleanup on this machine...${NC}"
            ;;
            
           * )
           echo -e "${GREEN}I'll take that as a no then... moving on...${NC}"
            ;;
      esac

}

function github_pull {
  
  #First backup variables.cfg
  variables_backup
  echo -e "${GREEN}---> Fetching the latest version of the scripts...${NC}"
  echo -e
  #First let's check if the repo is accesible
  REPO_STATUS=$(curl -I "https://github.com/multiversx/mx-chain-scripts" 2>&1 | awk '/HTTP\// {print $2}')
  cd $SCRIPTPATH
  if [ "$REPO_STATUS" -eq "200" ]; then
                                #Now let's fetch the latest version of the scripts
                                echo -e "${GREEN}---> mx-chain-scripts is reachable ! Pulling latest version...${NC}"
                                git reset --hard HEAD
                                git pull
                      else echo -e "${RED}---> mx-chain-scripts on Github not reachable !${NC}"
              fi
  #Restore custom variables after repo pull
  echo -e "${GREEN}---> Restoring your config files${NC}"
  echo -e
  variables_restore
  echo -e "${GREEN}---> Finished fetching scripts...${NC}"
  echo -e 

}

function get_logs {

  #Get journalctl logs from all the nodes
  NODELOGS=$(cat $CUSTOM_HOME/.numberofnodes)
  LOGSTIME=$(date "+%Y%m%d-%H%M")
  LOGSOFFSET=8080  
  #Make sure the log path exists
  mkdir -p $CUSTOM_HOME/mx-chain-logs
  
  for i in $(seq 1 $NODELOGS);
      do
        LOGSINDEX=$(( $i - 1 ))
        LOGSAPIPORT=$(( $LOGSOFFSET + $LOGSINDEX ))
        echo -e
        echo -e "${GREEN}Getting logs for MultiversX Node-$LOGSINDEX binary...${NC}"
        echo -e
        LOGSPUBLIC=$(curl -s http://127.0.0.1:$LOGSAPIPORT/node/status | jq -r .data.metrics.erd_public_key_block_sign | head -c 12)
        sudo journalctl --unit elrond-node-$LOGSINDEX >> $CUSTOM_HOME/mx-chain-logs/mx-chain-node-$LOGSINDEX-$LOGSPUBLIC.log
      done

  #Compress the logs and erase files
  cd $CUSTOM_HOME/mx-chain-logs/ && tar -zcvf mx-chain-node-logs-$LOGSTIME.tar.gz *.log && rm *.log
  echo -e
  echo -e "${GREEN}---> Logs have been stored in the ${CYAN}~/mx-chain-logs${GREEN} folder...${NC}" 

}

function run_benchmark {

  systemctl list-units --type=service --state running | { grep elrond || true; } > $CUSTOM_HOME/can_run_bench
  SERVICES_UP=$(cat $CUSTOM_HOME/can_run_bench | wc -l) && rm $CUSTOM_HOME/can_run_bench

     if [[ $SERVICES_UP == 0 ]]; then
                        #Run the included performance assessment tool
                        if [[ -f $CUSTOM_HOME/elrond-utils/assessment/assessment ]]; then
                                          echo -e
                                          echo -e "${GREEN}Running the performance assessment tool on ${CYAN}$HOSTNAME${GREEN}...${NC}"
                                          echo -e
                                          cd $CUSTOM_HOME/elrond-utils/assessment/ && ./assessment
                                          echo -e
                                          echo -e "${GREEN}Finished running tests. A ${CYAN}CSV${GREEN} file with the results has been placed in the ${CYAN}$CUSTOM_HOME/elrond-utils/assessment/${GREEN} folder.${NC}"
                                          echo -e
                                    else
                                      echo -e
                                      echo -e "${RED}The performance assessment tool hasn't been built yet or cannot be found...${NC}"
                                      echo -e
                              fi
                else
                  echo -e
                  echo -e "${CYAN}$SERVICES_UP${RED} MultiversX services running. For best results please stop all services before running the Benchmark command.${NC}"
                  echo -e "${RED}Please run the ${CYAN}stop${RED} option first."
                  echo -e
      fi

}

function migrate_scripts {

  paths
  echo -e
  echo -e "${GREEN}This action will migrate your ${CYAN}elrond-go-scripts${GREEN} to the new ${CYAN}mx-chain-scripts${GREEN} !${NC}"  
  echo -e 
  read -p "Do you want to go on with the action (Default No) ? (Yy/Nn)" yn
  echo -e
  case $yn in
       [Yy]* )
            variables_migrate
            variables_restore
            #Refresh variable for scripts
            source $SCRIPTPATH/config/variables.cfg
            #Check old configs repo and clone the new one acordingly
            if [ -d "$GOPATH/src/github.com/ElrondNetwork/elrond-config-$ENVIRONMENT" ]; then
                              echo -e
                              cd $GOPATH/src/github.com/ElrondNetwork/elrond-config-$ENVIRONMENT
                              OLD_CONFIGS=$(git status | grep HEAD | awk '{print $4}')
                      fi

            mkdir -p $GOPATH/src/github.com/multiversx && cd $GOPATH/src/github.com/multiversx && rm -rf mx-chain-"$ENVIRONMENT"-config
            git clone https://github.com/multiversx/mx-chain-"$ENVIRONMENT"-config && cd mx-chain-"$ENVIRONMENT"-config && git checkout --force tags/$OLD_CONFIGS

            echo -e
            echo -e "${GREEN}Variable migration complete ! The old scripts folder can be deleted !${NC}"
            echo -e
            ;;

       [Nn]* )
          echo -e "${GREEN}Fine ! Skipping scripts migration on this machine...${NC}"
            ;;

           * )
           echo -e "${GREEN}I'll take that as a no then... moving on...${NC}"
            ;;
      esac
}
