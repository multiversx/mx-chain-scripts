#!/bin/bash
set -e

function prerequisites {

  #Prerequisites function
  echo -e
  echo -e "${GREEN}Updating system & installing some dependencies...${NC}"
  echo -e
  DISTRO=$(cat /etc/*-release | grep -w "ID")
  
  if [[ $DISTRO == *"linuxmint"* ]] || [[ $DISTRO == *"ubuntu"* ]] || [[ $DISTRO == *"debian"* ]] || [[ $DISTRO == *"elementary"* ]]; then
                                      sudo DEBIAN_FRONTEND=noninteractive apt-get update -qq && sudo DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade > /dev/null
                                      sudo DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install build-essential > /dev/null && sudo DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install git rsync curl zip unzip jq gcc wget > /dev/null
                                      echo "export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin" >> ~/.profile
                                      echo "export GOPATH=$HOME/go" >> ~/.profile
                                  else 
                                    echo "Unsupported DISTRO..."
                                    exit
   fi
  
  # Check if $CUSTOM_HOME exists and if not create it
  if ! [ -d "$CUSTOM_HOME" ]; then mkdir -p $CUSTOM_HOME; fi
  
  # Create nodes & utils home
  if ! [ -d "$CUSTOM_HOME/elrond-nodes" ]; then mkdir -p $CUSTOM_HOME/elrond-nodes; fi
  if ! [ -d "$CUSTOM_HOME/elrond-utils" ]; then mkdir -p $CUSTOM_HOME/elrond-utils; fi
  
  #Limit journalctl size
  echo -e
  echo -e "${GREEN}Limiting journalctl node units logs size...${NC}"
  echo -e
  echo 'SystemMaxUse=4000M' | sudo tee -a /etc/systemd/journald.conf && echo 'SystemMaxFileSize=800M' | sudo tee -a /etc/systemd/journald.conf
  sudo systemctl restart systemd-journald
  
  echo -e "${GREEN}Task completed.${NC}"
  echo -e

}

function paths {

  #Export environment variables
  export GOPATH=$HOME/go
  export PATH=$GOPATH/bin:$PATH
  export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

}

function print_in_colors (){
  local strings_and_colors=("$@")

  for i in "${!strings_and_colors[@]}"; do
    if [[ $((i % 2)) -eq 0 ]]; then
      # print string
      echo -n -e "${strings_and_colors[i + 1]}${strings_and_colors[i]} "
    fi
  done

  echo -e "${NC}"
}

function check_variables {

  echo -e
  echo -e "${GREEN}Checking variables...${NC}"
  echo -e

  #Declare error variable to false for track error
  ERROR=false
  
  #Check if the ENVIRONMENT variable is set and is valid
  CHECK_ENV_SET=$(cat $SCRIPTPATH/config/variables.cfg | grep ENVIRONMENT= | awk -F'"' '{print $2}')
  if ! [[ "$CHECK_ENV_SET" =~ ^(mainnet|testnet|devnet)$ ]]; then
    print_in_colors "Please set your ENVIRONMENT variable !" "${RED}"
    ERROR=true
  else
    print_in_colors "Target ENVIRONMENT is : " "${GREEN}" "$ENVIRONMENT." "${CYAN}"
  fi
  echo -e
  #Check if CUSTOM_HOME exists
  if ! [ -d "$CUSTOM_HOME" ]; then 
    print_in_colors "Please set your CUSTOM_HOME variable !" "${RED}"
    ERROR=true
  fi

  #Check if USE_AUTO_NODE_CONFIG is set to "true" 
  if [[ "$USE_AUTO_NODE_CONFIG" == "true" ]]; then
    print_in_colors "USE_AUTO_NODE_CONFIG is set to " "${GREEN}" "$USE_AUTO_NODE_CONFIG" "${CYAN}"
    echo -e
    
    #Check if NODE_NUMBER is set to a valid number
    if ! [[ "$NODE_NUMBER" =~ ^[0-9]+$ ]]; then
      print_in_colors "Please set your NODE_NUMBER variable first !" "${RED}"
      ERROR=true
    else
      print_in_colors "You will deploy " "${GREEN}" "$NODE_NUMBER" "${CYAN}" " nodes." "${GREEN}"
    fi
    echo -e
  
    if  ! [[ ${#NODE_NAMES[@]} -eq $NODE_NUMBER ]]; then
      print_in_colors "Please set your NODE_NAMES variable correctly: " "${NC}" "The length do not match the number of nodes !" "${RED}"
      ERROR=true
    fi

    # Check if NODE_NAMES contains valid strings with alphanumeric characters, underscore and dash
    for i in "${NODE_NAMES[@]}"
    do
      if ! [[ "$i" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        print_in_colors "Please set your NODE_NAMES variable correctly: " "${NC}" "The name of the node ${i} must contain only alphanumeric characters, underscore and dash !" "${RED}"
        ERROR=true
      fi
    done


    if  ! [[ ${#NODE_REDUNDANCIES[@]} -eq $NODE_NUMBER ]]; then
      print_in_colors "Please set your NODE_REDUNDANCIES variable correctly: " "${NC}" "The length do not match the number of nodes !" "${RED}"
      ERROR=true
    fi

    # Check if NODE_REDUNDANCIES contains valid strings that represent a number
    for i in "${NODE_REDUNDANCIES[@]}"
    do
      if ! [[ "$i" =~ ^[0-9]+$ ]]; then
        print_in_colors "Please set your NODE_REDUNDANCIES variable correctly: " "${NC}" "The redundancy ${i} must contain only numeric characters!" "${RED}"
        ERROR=true
      fi
    done


  
    #Check if ERROR is set to true
    if [[ "$ERROR" == "true" ]]; then
      echo -e
      print_in_colors "Please fix the errors above and try again." "$RED"
      exit
    else
      #If no error have been raised, print resume of variables
      print_in_colors "All variables are set correctly for automatic nodes configuration." "$GREEN"
      echo -e
      COUNTER=0

      for i in "${NODE_NAMES[@]}"
      do
        print_in_colors "${COUNTER}"  "${GREEN}" " : " "${CYAN}" "$i" "${GREEN}" "(Redundancy = ${NODE_REDUNDANCIES[$COUNTER]})" "${GREEN}"
        COUNTER=$((COUNTER+1))
      done
      # Wait for user input before continue
      read -e -p "Press any key to continue... " -n1 -s
    fi
  else
    print_in_colors "USE_AUTO_NODE_CONFIG is set to :" "$GREEN" "$USE_AUTO_NODE_CONFIG" "$CYAN" "You need to configure your nodes manually." "${NC}"
    echo -e
  fi

}

function check_api_limit {

#Check API rate-limit
  if [ ${GITHUB_API_LIMIT} -eq ${GITHUB_API_USED} ] && [[ -z "$GITHUBTOKEN" ]]; then
                            echo -e
                            echo -e "${RED}GitHub API Requests Limit for this IP has been reached !${NC}"
                            echo -e "${RED}The counter will reset at ${CYAN}${HUMAN_TIME}${RED}.${NC}"
                            echo -e
                            echo -e "${RED}We suggest using a GitHub Token to avoid this issue in the future.${NC}"
                            exit
              else
                  echo -e 
                  echo -e "${GREEN}Your GitHub API Requests is at ${CYAN}$GITHUB_API_USED${GREEN} out of a total of ${CYAN}$GITHUB_API_LIMIT${GREEN} (applied per hour)${NC}"
                  echo -e 
        fi

}


function check_scripts_version {
  
  #Check if there are newer versions of the scripts available
  cd $SCRIPTPATH
  CURRENT_SCRIPTS_COMMIT=$(git show | grep  -m 1 commit | awk '{print $2}')

  if [ ${GITHUB_API_LIMIT} -eq ${GITHUB_API_USED} ] && [[ -z "$GITHUBTOKEN" ]]; then 
                        echo -e "${RED}GitHub API Requests Limit for this IP has been reached !${NC}"
                        echo -e "${RED}Cannot check if you are using the latest version of the scripts !${NC}"
                        echo -e
                        read -p "Are you sure you want to continue ? (Yy/Nn)" yn  

                        case $yn in
                              [Yy]* ) ;;
                              [Nn]* ) echo "Ok.Exiting."; exit;;
                              * ) echo "Please answer Yy / Nn ..."; exit;;
                          esac

              else    
                if [ "$LATEST_SCRIPTS_COMMIT" != "$CURRENT_SCRIPTS_COMMIT" ]; then
                echo -e 
                read -p "You aren't running the current versions of the scripts. Are you sure you want to continue ? (Yy/Nn)" yn
                echo -e

                    case $yn in
                          [Yy]* ) ;;
                          [Nn]* ) echo "Ok.Exiting."; exit;;
                          * ) echo "Please answer Yy / Nn ..."; exit;;
                      esac
                    fi
      fi  

}

function go_lang {
  
  #Identify machine architecture
  ARCH=$(dpkg --print-architecture)

  #Check if golang is installed on system
  if ! [ -x "$(command -v go)" ]; then
        #Get the latest version of GO for amd64 & installing it
        echo -e
        echo -e "${RED}GO is not installed on your system${NC}"
        echo -e
        echo -e "${GREEN}The best working version of Go is:${CYAN}${GO_LATEST_TESTED}${NC}"
        echo -e "${GREEN}Installing it now...${NC}"
        echo -e
        wget https://dl.google.com/go/${GO_LATEST_TESTED}.linux-${ARCH}.tar.gz
        sudo tar -C /usr/local -xzf ${GO_LATEST_TESTED}.linux-${ARCH}.tar.gz
        rm ${GO_LATEST_TESTED}.linux-${ARCH}.tar.gz

      else
          #Check the installed version number
          GOVERSION=$(go version | awk '{print $3}')
          if [[ "$GOVERSION" < "${GO_LATEST_TESTED}" ]]; then
                echo -e
                echo -e "${RED}GO version is ${CYAN}$GOVERSION${RED} and the best working version is ${CYAN}${GO_LATEST_TESTED}${RED}... ${NC}"
                #Detect go install method
                GO_INSTALL_METHOD=$(which go)

                    if [[ "$GO_INSTALL_METHOD" == "/usr/local/go/bin/go" ]]; then
                            #Installed by scripts. Go ahead and upgrade.
                            echo -e
                            echo -e "${GREEN}Your GO binary will pe upgraded to the minimum required version...${NC}"
                            sudo rm -rf /usr/local/go
                            wget -4 https://dl.google.com/go/${GO_LATEST_TESTED}.linux-${ARCH}.tar.gz
                            sudo tar -C /usr/local -xzf ${GO_LATEST_TESTED}.linux-${ARCH}.tar.gz
                            rm ${GO_LATEST_TESTED}.linux-${ARCH}.tar.gz

                        else
                        echo -e
                        echo -e "${RED}GO was not installed using the elrond scripts. Operation cannot continue...${NC}"
                        exit
                    fi
              
                else
                echo -e
                echo -e "${GREEN}GO is already installed: ${CYAN}$GOVERSION${NC}${GREEN}...skipping install${NC}"
                echo -e
          fi
  fi

}

function show_menu {

echo -e
echo -e
echo -e "${CYAN}MultiversX ${RED}$ATTENTION${CYAN} scripts options:${NC}"
echo -e
echo -e "${GREEN} 1) ${CYAN}install${GREEN} - Regular install process for validator nodes on ${CYAN}$ENVIRONMENT${NC}"
echo -e "${GREEN} 2) ${CYAN}observing_squad${GREEN} - Option for setting up a MultiversX ${CYAN}$ENVIRONMENT${GREEN} Observing Squad${NC}"
echo -e "${GREEN} 3) ${CYAN}upgrade${GREEN} - Run the upgrade process for the installed nodes${NC}"
echo -e "${GREEN} 4) ${CYAN}upgrade_squad${GREEN} - Run the upgrade process for MultiversX ${CYAN}$ENVIRONMENT${GREEN} Observing Squad observers${NC}"
echo -e "${GREEN} 5) ${CYAN}upgrade_proxy${GREEN} - Run the upgrade process for the installed proxy${NC}"
echo -e "${GREEN} 6) ${CYAN}remove_db${GREEN} - Remove the nodes databases (individual node selection)${NC}"
echo -e "${GREEN} 7) ${CYAN}start${GREEN} - Start all the installed nodes (will also start mx-chain-proxy if installed)${NC}"
echo -e "${GREEN} 8) ${CYAN}stop${GREEN} - Stop all the installed nodes (will also stop mx-chain-proxy if installed)${NC}"
echo -e "${GREEN} 9) ${CYAN}cleanup${GREEN} - Remove everything from the host${NC}"
echo -e "${GREEN}10) ${CYAN}github_pull${GREEN} - Get latest version of scripts from github (with variables backup)${NC}"
echo -e "${GREEN}11) ${CYAN}add_nodes${GREEN} - Add more nodes to your current running ones ${RED}(not compatible with the observing_squad install)${NC}"
echo -e "${GREEN}12) ${CYAN}get_logs${GREEN} - Get the logs from all the nodes${NC}"
echo -e "${GREEN}13) ${CYAN}benchmark${GREEN} - Run the performance assessment tool${NC}"
echo -e "${GREEN}14) ${CYAN}quit${GREEN} - Exit this menu${NC}"
echo -e
echo -e

}

function compare_config_versions {

  check_variables
  #Check to see if configs have been updated
  cd $GOPATH/src/github.com/multiversx/mx-chain-$ENVIRONMENT-config
  INSTALLED_CONFIGS=$(git status | grep HEAD | awk '{print $4}')
  echo -e
  echo -e "${GREEN}Local version for configs: ${CYAN}tags/$INSTALLED_CONFIGS${NC}"
  echo -e
  echo -e "${GREEN}Github version of configs: ${CYAN}$CONFIGVER${NC}"
  echo -e
  [[ ! -z "$OVERRIDE_CONFIGVER" ]] && echo -e "${GREEN}Override for configs is set to: ${CYAN}$OVERRIDE_CONFIGVER${NC}"
  echo -e
  echo -e "${GREEN}Release notes for the latest version:${NC}"
  echo -e "${GREEN}$RELEASENOTES${NC}"  
  echo -e 
}

function git_clone {
  
  #Clone the elrong-go & elrong-config repos

  #If OVERRIDE_CONFIGVER is set proceed to clone from that tag
  [[ ! -z "$OVERRIDE_CONFIGVER" ]] && CONFIGVER=$OVERRIDE_CONFIGVER

  echo -e "${GREEN}Cloning into ${CYAN}mx-chain-$ENVIRONMENT-config${GREEN} with tag ${CYAN}$CONFIGVER${GREEN}...${NC}"
  echo -e
  CONFIGVER_SHORT=$(echo $CONFIGVER | sed 's/tags\///')
  cd $GOPATH/src/github.com/multiversx && git clone https://github.com/multiversx/mx-chain-"$ENVIRONMENT"-config --branch=$CONFIGVER_SHORT --single-branch --depth=1
  echo -e
  
  #Get mx-chain-go binary version from the mx-chain-$ENVIRONMENT-config repo
  BINARYVER=$(cat $GOPATH/src/github.com/multiversx/mx-chain-$ENVIRONMENT-config/binaryVersion)
  
  echo -e
  echo -e "${GREEN}Cloning into ${CYAN}mx-chain-go${GREEN} with tag ${CYAN}$BINARYVER${GREEN}...${NC}"
  echo -e
  BINARYVER_SHORT=$(echo $BINARYVER | sed 's/tags\///')
  cd $GOPATH/src/github.com/multiversx && git clone https://github.com/multiversx/mx-chain-go --branch=$BINARYVER_SHORT --single-branch --depth=1
  
  echo -e "${GREEN}Done ! Moving to next step...${NC}"
  echo -e

}

function git_clone_proxy {

  #Clone the mx-chain-proxy-go repo (for the observers command)
  echo -e
  echo -e "${GREEN}Cloning into the ${CYAN}mx-chain-proxy-go${GREEN} and checking out ${CYAN}${PROXY_TAG}${GREEN}...${NC}"
  echo -e
  PROXY_TAG_SHORT=$(echo $PROXY_TAG | sed 's/tags\///')
  cd $GOPATH/src/github.com/multiversx && git clone https://github.com/multiversx/mx-chain-proxy-go.git --branch=$PROXY_TAG_SHORT --single-branch --depth=1
  
  echo -e "${GREEN}Done ! Moving to next step...${NC}"
  echo -e

}

function systemd {

  #Add systemd node service & syslogd logging
  echo -e
  echo -e "${GREEN}Installing systemd unit for node-$INDEX...${NC}"
  echo -e

  OFFSET=8080
  APIPORT=$(( $OFFSET + $INDEX ))

  #Create the service file for our node
  echo "[Unit]
  Description=MultiversX Node-$INDEX
  After=network-online.target
  
  [Service]
  User=$CUSTOM_USER
  WorkingDirectory=$WORKDIR
  ExecStart=$WORKDIR/node -use-log-view -log-logger-name -log-correlation -log-level *:DEBUG -rest-api-interface localhost:$APIPORT $NODE_EXTRA_FLAGS
  StandardOutput=journal
  StandardError=journal
  Restart=always
  RestartSec=3
  LimitNOFILE=4096
  
  [Install]
  WantedBy=multi-user.target" > elrond-node-$INDEX.service
  
  #Move files to appropriate locations
  sudo mv elrond-node-$INDEX.service /etc/systemd/system/
  sudo systemctl enable elrond-node-$INDEX.service
  
}

function build_node {
  
  #Build the node from latest tag
  echo -e
  echo -e "${GREEN}Building your node from tag ${CYAN}$BINARYVER${GREEN}...${NC}"
  echo -e
  #Building the node from the mx-chain-go repo
  cd $GOPATH/src/github.com/multiversx/mx-chain-go
  echo -e "${GREEN}Compiling binary...${NC}"
  echo -e

  #If OVERRIDE_CONFIGVER is set SHOWVER should take it into account
  [[ ! -z "$OVERRIDE_CONFIGVER" ]] && SHOWVER=$(echo ${OVERRIDE_CONFIGVER#${TMPVAR}})
  
  cd cmd/node && go build -v -ldflags="-X main.appVersion=$SHOWVER-0-$(git describe --tags --long | tail -c 11)"
  echo -e "${GREEN}Done !${NC}" 

  #Build the elrond utils
  echo -e "${GREEN}Compiling the termui binary...${NC}"
  echo -e
  cd $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/termui && go build
  echo -e "${GREEN}Compiling the logviewer binary ...${NC}"
  echo -e
  cd $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/logviewer && go build
  echo -e "${GREEN}Compiling the performance assessment tool binary ...${NC}"
  echo -e
  cd $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/assessment && go build
  echo -e "${GREEN}Compiling the seednode binary ...${NC}"
  echo -e
  cd $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/seednode && go build
  #Copy libwasmer to a location in path for system wide use
  echo -e "${GREEN}Copying libwasmer to your LIB folder...${NC}"
  echo -e

  #---- TO DO --- Remove this code in a future review
  WASM_ARCH=$(dpkg --print-architecture)
  cd $GOPATH/src/github.com/multiversx/mx-chain-go/

  if (grep -q "arwen" $GOPATH/src/github.com/multiversx/mx-chain-go/go.mod);
      then
        ARWEN_VERSION=$(cat go.mod | grep "arwen" | sed 's/^.*arwen-wasm-vm *//' | tail -n 1)
        sudo cp -f $GOPATH/pkg/mod/github.com/\!elrond\!network/arwen-wasm-vm@$ARWEN_VERSION/wasmer/libwasmer_linux_$WASM_ARCH.so /lib/
        echo -e "${GREEN}Copying libwasmer from ${CYAN}$GOPATH/pkg/mod/github.com/\!elrond\!network/arwen-wasm-vm@$ARWEN_VERSION/wasmer/libwasmer_linux_$WASM_ARCH.so ${GREEN}...${NC}"

        else
          if (grep -q "mx-chain-vm-v1_" $GOPATH/src/github.com/multiversx/mx-chain-go/go.mod);
             then
                WASM_VERSION_SINGLE=$(cat go.mod | grep "mx-chain-vm-v1_" | tail -n 1 | awk -F'/' '{print $3}' | sed 's/ /@/g')
                sudo cp -f $GOPATH/pkg/mod/github.com/multiversx/$WASM_VERSION_SINGLE/wasmer/libwasmer_linux_$WASM_ARCH.so /lib/
                echo -e "${GREEN}Copying libwasmer from ${CYAN}$GOPATH/pkg/mod/github.com/multiversx/$WASM_VERSION_SINGLE/wasmer/libwasmer_linux_$WASM_ARCH.so ${GREEN}...${NC}"

              else
                echo -e "${RED}Couldn't find a suitable libwasmer to add...${NC}"
          fi
  fi
  #--------------------------------------------------

}

function install_files {
  
  echo -e "${GREEN}Copying binary & configs for ${CYAN}node-$INDEX${GREEN} to ${CYAN}$WORKDIR${GREEN}...${NC}"
  echo -e
  mkdir -p $WORKDIR/config
  cp $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/node/node $WORKDIR
  cp -r $GOPATH/src/github.com/multiversx/mx-chain-$ENVIRONMENT-config/* $WORKDIR/config

}

function install_utils {

  #Copy utils to elrond-utils
  echo -e "${GREEN}Copying termui & logviewer binaries to elrond-utils...${NC}"
  echo -e
  #Copy the termui binary to the utils folder
  if ps -all | grep -q termui; then echo "Process running. Terminating for upgrade"; killall termui; sleep 2; fi
  cp -f $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/termui/termui $CUSTOM_HOME/elrond-utils/
  #Copy the logviewer binary to the utils folder
  if ps -all | grep -q logviewer; then echo "Process running. Terminating for upgrade"; killall logviewer; sleep 2; fi
  cp -f $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/logviewer/logviewer $CUSTOM_HOME/elrond-utils/
  #Copy the seednode binary and configs to the utils folder
  if ps -all | grep -q seednode; then echo "Process running. Terminating for upgrade"; killall seednode; sleep 2; fi
  if [ -e $CUSTOM_HOME/elrond-utils/seednode ]; then rm $CUSTOM_HOME/elrond-utils/seednode; fi
  mkdir -p $CUSTOM_HOME/elrond-utils/seednode/config/ && cp -f $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/seednode/seednode $CUSTOM_HOME/elrond-utils/seednode/
  if [ -e $GOPATH/src/github.com/multiversx/mx-chain-$ENVIRONMENT-config/seednode/config.toml ]; then cp -f $GOPATH/src/github.com/multiversx/mx-chain-$ENVIRONMENT-config/seednode/config.toml $CUSTOM_HOME/elrond-utils/seednode/config/config.toml; fi
  if [ -e $GOPATH/src/github.com/multiversx/mx-chain-$ENVIRONMENT-config/seednode/p2p.toml ]; then cp -f $GOPATH/src/github.com/multiversx/mx-chain-$ENVIRONMENT-config/seednode/p2p.toml.toml $CUSTOM_HOME/elrond-utils/seednode/config/p2p.toml; fi
  #Copy the keygenerator to the utils folder
  cp -f $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/keygenerator/keygenerator $CUSTOM_HOME/elrond-utils/
  #Copy the assessment tool to its own folder in the utils folder
  mkdir -p $CUSTOM_HOME/elrond-utils/assessment/ && cp -r $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/assessment/testdata $CUSTOM_HOME/elrond-utils/assessment/
  cp -f $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/assessment/assessment $CUSTOM_HOME/elrond-utils/assessment/

}

function node_name {
  NODE_NAME=""
  REDUNDANCY="0"

  if [ "$USE_AUTO_NODE_CONFIG" = "true" ] & [ $# -eq 2 ]; then
    NODE_NAME=$1
    REDUNDANCY=$2
  else
    echo -e
    echo -e "${GREEN}Time to choose a node name...${NC}"
    echo -e
    read -p "Choose a custom name (default mx-chain-$ENVIRONMENT-validator-$INDEX): " NODE_NAME
    if [ "$NODE_NAME" = "" ]
    then
      NODE_NAME="mx-chain-$ENVIRONMENT-validator-$INDEX"
    fi
  fi

  sed -i "s/NodeDisplayName = \"\"/NodeDisplayName = \"${NODE_NAME//\//\\/}\"/" $WORKDIR/config/prefs.toml
  sed -i "s/Identity = \"\"/Identity = \"${IDENTITY}\"/" $WORKDIR/config/prefs.toml
  sed -i "s/RedundancyLevel = [0-9]/RedundancyLevel = ${REDUNDANCY}/" $WORKDIR/config/prefs.toml

}

function cleanup_files {

  #Cleanup Logs, Stats & DB
  echo -e
  echo -e "${RED}Erasing previous node data (db,logs,stats)...${NC}"
  sudo rm -rf $UPDATEWORKDIR/logs
  sudo rm -rf $UPDATEWORKDIR/stats
  sudo rm -rf $UPDATEWORKDIR/db
  sudo rm -rf $UPDATEWORKDIR/health-records
  #recreate erased folders 
  mkdir -p $UPDATEWORKDIR/{logs,stats,db,health-records} 

}

function update {

  echo -e
  echo -e "${GREEN}Updating node-$UPDATEINDEX binary & configs...${NC}"
  echo -e
  cp $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/node/node $UPDATEWORKDIR
  cp $GOPATH/src/github.com/multiversx/mx-chain-$ENVIRONMENT-config/* $UPDATEWORKDIR/config -r

}

function build_keygen {
  
  echo -e
  echo -e "${GREEN}Building key generator...${NC}"
  echo -e
  cd $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/keygenerator && go build
  
}

function keys {

  #Check for keys or build Key Generator and create unique node keys
  if [[ -f $NODE_KEYS_LOCATION/node-$INDEX.zip ]]; then
                       echo -e
                       echo -e "${GREEN}Found PEMs on host for node-$INDEX. Copying them to node-$INDEX config folder...${NC}"
                       echo -e 
                       unzip -j $NODE_KEYS_LOCATION/node-$INDEX.zip -d $WORKDIR/config/
               else
                 echo -e
                 echo -e "${RED}No PEMs present. You should add some valid keys...${NC}"
                 echo -e
    fi

}

function observer_keys {

  #Create unique observer keys (for the install only observers scenario)
  echo -e
  echo -e "${GREEN}Generating unique identity...${NC}"
  echo -e
  cd $CUSTOM_HOME/elrond-utils/ && ./keygenerator
  mv *.pem $WORKDIR/config/

}

function elrond_proxy {

  #Build the mx-chain-proxy binary
  echo -e
  echo -e "${GREEN}Building the mx-chain-proxy binary...${NC}"
  echo -e
  cd $GOPATH/src/github.com/multiversx/mx-chain-proxy-go/cmd/proxy && \
        go build -ldflags="-X main.appVersion=$(git describe --tags --long --dirty) -X main.commitID=$(git rev-parse HEAD)"
  
  echo -e
  echo -e "${GREEN}Copying files to the mx-chain-proxy folder...${NC}"
  echo -e
  mkdir -p $CUSTOM_HOME/elrond-proxy && cp -pr $GOPATH/src/github.com/multiversx/mx-chain-proxy-go/cmd/proxy/* $CUSTOM_HOME/elrond-proxy/

  #Create the service file for the proxy binary
  echo -e
  echo -e "${GREEN}Setting mx-chain-proxy as system service...${NC}"
  echo -e
  
  echo "[Unit]
  Description=MultiversX Proxy
  After=network-online.target
  
  [Service]
  User=$CUSTOM_USER
  WorkingDirectory=$CUSTOM_HOME/elrond-proxy
  ExecStart=$CUSTOM_HOME/elrond-proxy/proxy
  StandardOutput=journal
  StandardError=journal
  Restart=always
  RestartSec=3
  LimitNOFILE=4096
  
  [Install]
  WantedBy=multi-user.target" > elrond-proxy.service
  
  #Move files to appropriate locations
  sudo mv elrond-proxy.service /etc/systemd/system/
  sudo systemctl enable elrond-proxy.service

}

function proxy_config {

  #Customize the config.toml file for the mx-chain-proxy
  echo -e
  echo -e "${GREEN}Customizing the mx-chain-proxy config.toml file...${NC}"
  echo -e
  
  sed -i "s/ServerPort = 8080/ServerPort = 8079/g" $CUSTOM_HOME/elrond-proxy/config/config.toml
  sed -i -n '/4294967295/q;p' $CUSTOM_HOME/elrond-proxy/config/config.toml
  
  echo "# shard id 4294967295
  [[Observers]]
     ShardId = 0
     Address = \"http://127.0.0.1:8080\"

  [[Observers]]
     ShardId = 1
     Address = \"http://127.0.0.1:8081\"

  [[Observers]]
     ShardId = 2
     Address = \"http://127.0.0.1:8082\"

  [[Observers]]
     ShardId = 4294967295
     Address = \"http://127.0.0.1:8083\"" >> $CUSTOM_HOME/elrond-proxy/config/config.toml

}

function variables_backup { 
  
  echo -e
  echo -e "${GREEN}Backing up your current custom variables...${NC}"
  echo -e
  
  #Create a file to safely hold the user's custom variables
  if ! [ -d "$CUSTOM_HOME/script-configs-backup" ]; then mkdir -p $CUSTOM_HOME/script-configs-backup; fi
  rm -f $CUSTOM_HOME/script-configs-backup/custom-variables #always remove the old file before creating a new one
  touch $CUSTOM_HOME/script-configs-backup/custom-variables
  
  #Exporting from variables.cfg to the backup file
  cat $SCRIPTPATH/config/variables.cfg | grep ENVIRONMENT= >> $CUSTOM_HOME/script-configs-backup/custom-variables
  cat $SCRIPTPATH/config/variables.cfg | grep CUSTOM_HOME= >> $CUSTOM_HOME/script-configs-backup/custom-variables
  cat $SCRIPTPATH/config/variables.cfg | grep CUSTOM_USER= >> $CUSTOM_HOME/script-configs-backup/custom-variables
  cat $SCRIPTPATH/config/variables.cfg | grep NODE_KEYS_LOCATION= >> $CUSTOM_HOME/script-configs-backup/custom-variables
  cat $SCRIPTPATH/config/variables.cfg | grep GITHUBTOKEN= >> $CUSTOM_HOME/script-configs-backup/custom-variables
  cat $SCRIPTPATH/config/variables.cfg | grep IDENTITY= >> $CUSTOM_HOME/script-configs-backup/custom-variables
  cat $SCRIPTPATH/config/variables.cfg | grep NODE_EXTRA_FLAGS= >> $CUSTOM_HOME/script-configs-backup/custom-variables

  echo -e
  echo -e "${GREEN}Your current saved variables are:${NC}"
  echo -e
  echo -e "$(<$CUSTOM_HOME/script-configs-backup/custom-variables)"
  echo -e

}

function variables_restore {
  
  #Variables values after the git pull (properly escaped for sed)
  ORIG_ENV=$(cat $SCRIPTPATH/config/variables.cfg | grep ENVIRONMENT=) && ESCAPED_ORIG_ENV=$(printf '%s\n' "$ORIG_ENV" | sed -e 's/[\/&]/\\&/g')
  ORIG_HOME=$(cat $SCRIPTPATH/config/variables.cfg | grep CUSTOM_HOME=) && ESCAPED_ORIG_HOME=$(printf '%s\n' "$ORIG_HOME" | sed -e 's/[\/&]/\\&/g')
  ORIG_USER=$(cat $SCRIPTPATH/config/variables.cfg | grep CUSTOM_USER=) && ESCAPED_ORIG_USER=$(printf '%s\n' "$ORIG_USER" | sed -e 's/[\/&]/\\&/g')
  ORIG_KEYS=$(cat $SCRIPTPATH/config/variables.cfg | grep NODE_KEYS_LOCATION=) && ESCAPED_ORIG_KEYS=$(printf '%s\n' "$ORIG_KEYS" | sed -e 's/[\/&]/\\&/g')
  ORIG_TOKEN=$(cat $SCRIPTPATH/config/variables.cfg | grep GITHUBTOKEN=) && ESCAPED_ORIG_TOKEN=$(printf '%s\n' "$ORIG_TOKEN" | sed -e 's/[\/&]/\\&/g')
  ORIG_IDENT=$(cat $SCRIPTPATH/config/variables.cfg | grep IDENTITY=) && ESCAPED_ORIG_IDENT=$(printf '%s\n' "$ORIG_IDENT" | sed -e 's/[\/&]/\\&/g')
  ORIG_FLAGS=$(cat $SCRIPTPATH/config/variables.cfg | grep NODE_EXTRA_FLAGS=) && ESCAPED_ORIG_FLAGS=$(printf '%s\n' "$ORIG_FLAGS" | sed -e 's/[\/&]/\\&/g')

  #Custom variables values from the backup file (properly escaped for sed)
  BACKUP_ENV=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep ENVIRONMENT=) && ESCAPED_BACKUP_ENV=$(printf '%s\n' "$BACKUP_ENV" | sed -e 's/[\/&]/\\&/g')
  BACKUP_HOME=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep CUSTOM_HOME=) && ESCAPED_BACKUP_HOME=$(printf '%s\n' "$BACKUP_HOME" | sed -e 's/[\/&]/\\&/g')
  BACKUP_USER=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep CUSTOM_USER=) && ESCAPED_BACKUP_USER=$(printf '%s\n' "$BACKUP_USER" | sed -e 's/[\/&]/\\&/g')
  BACKUP_KEYS=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep NODE_KEYS_LOCATION=) && ESCAPED_BACKUP_KEYS=$(printf '%s\n' "$BACKUP_KEYS" | sed -e 's/[\/&]/\\&/g')
  BACKUP_TOKEN=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep GITHUBTOKEN=) && ESCAPED_BACKUP_TOKEN=$(printf '%s\n' "$BACKUP_TOKEN" | sed -e 's/[\/&]/\\&/g')
  BACKUP_IDENT=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep IDENTITY=) && ESCAPED_BACKUP_IDENT=$(printf '%s\n' "$BACKUP_IDENT" | sed -e 's/[\/&]/\\&/g')
  BACKUP_FLAGS=$(cat $CUSTOM_HOME/script-configs-backup/custom-variables | grep NODE_EXTRA_FLAGS=) && ESCAPED_BACKUP_FLAGS=$(printf '%s\n' "$BACKUP_FLAGS" | sed -e 's/[\/&]/\\&/g')

  #Use sed to restore the custom variables
  echo -e
  echo -e "${GREEN}---> Restoring your config files${NC}"
  echo -e

  sed -i "s/${ESCAPED_ORIG_ENV}/${ESCAPED_BACKUP_ENV}/g" $SCRIPTPATH/config/variables.cfg
  sed -i "s/${ESCAPED_ORIG_HOME}/${ESCAPED_BACKUP_HOME}/g" $SCRIPTPATH/config/variables.cfg
  sed -i "s/${ESCAPED_ORIG_USER}/${ESCAPED_BACKUP_USER}/g" $SCRIPTPATH/config/variables.cfg
  sed -i "s/${ESCAPED_ORIG_KEYS}/${ESCAPED_BACKUP_KEYS}/g" $SCRIPTPATH/config/variables.cfg
  sed -i "s/${ESCAPED_ORIG_TOKEN}/${ESCAPED_BACKUP_TOKEN}/g" $SCRIPTPATH/config/variables.cfg
  sed -i "s/${ESCAPED_ORIG_IDENT}/${ESCAPED_BACKUP_IDENT}/g" $SCRIPTPATH/config/variables.cfg
  sed -i "s/${ESCAPED_ORIG_FLAGS}/${ESCAPED_BACKUP_FLAGS}/g" $SCRIPTPATH/config/variables.cfg
  
  #Remove the temp file with the custom variables
  rm $CUSTOM_HOME/script-configs-backup/custom-variables

}

function proxy_start {

if [ -e /etc/systemd/system/elrond-proxy.service ]; then
        echo -e
        echo -e "${GREEN}Starting the MultiversX Proxy service on host ${CYAN}$HOST${GREEN}...${NC}"
        echo -e
        sudo systemctl start elrond-proxy
    fi

}

function proxy_stop {

if [ -e /etc/systemd/system/elrond-proxy.service ]; then
        echo -e
        echo -e "${GREEN}Stopping the MultiversX Proxy service on host ${CYAN}$HOST${GREEN}...${NC}"
        echo -e
        sudo systemctl stop elrond-proxy
    fi

}

function running_services {

  systemctl list-units --type=service --state loaded | grep elrond > $CUSTOM_HOME/temp_running_services
  echo -e
  echo -e "${GREEN}Current list of MultiversX service on host ${CYAN}$HOST${GREEN}...${NC}"
  echo -e
  cat $CUSTOM_HOME/temp_running_services
  rm $CUSTOM_HOME/temp_running_services
  echo -e

}

function env_file_check {

if [ ! -f $CUSTOM_HOME/.installedenv ]; then
                          echo -e
                          echo -e "${RED}WARNING! Environment file ${CYAN}( $CUSTOM_HOME/.installedenv )${RED} does not exist !${NC}"
                          echo -e
                          echo -e "${RED}Please review your setup and check ${CYAN}https://docs.multiversx.com${RED} for instructions !${NC}"  
                          echo -e
                          exit
  fi

}

function env_change_check {

if [ ${ENVIRONMENT} != "$(cat $CUSTOM_HOME/.installedenv)" ]; then
                          echo -e
                          echo -e "${RED}-----------------------------------------------------------------------------------------------${NC}"
                          echo -e "${RED}WARNING! Current environment is set to ${CYAN}${ENVIRONMENT}${RED} but installed nodes use the ${CYAN}$(cat $CUSTOM_HOME/.installedenv)${RED} environment !${NC}"
                          echo -e "${RED}-----------------------------------------------------------------------------------------------${NC}"
                          echo -e    
    fi

}

function variables_migrate { 
  
  echo -e
  echo -e "${GREEN}Backing up your current custom variables...${NC}"
  echo -e
  
  read -p "What's the location for the old scripts ? (default /home/ubuntu/elrond-go-scripts): " OLD_SCRIPTS_FOLDER
  if [ "$OLD_SCRIPTS_FOLDER" = "" ]
  then
      OLD_SCRIPTS_FOLDER="/home/ubuntu/elrond-go-scripts"
  fi

  #Create a file to safely hold the user's custom variables
  GUESS_CUSTOM_HOME=${PWD%/*}

  if ! [ -d "$GUESS_CUSTOM_HOME/script-configs-backup" ]; then mkdir -p $GUESS_CUSTOM_HOME/script-configs-backup; fi
  rm -f $GUESS_CUSTOM_HOME/script-configs-backup/custom-variables #always remove the old file before creating a new one
  touch $GUESS_CUSTOM_HOME/script-configs-backup/custom-variables
  
  #Exporting from variables.cfg to the backup file
  cat $OLD_SCRIPTS_FOLDER/config/variables.cfg | grep ENVIRONMENT= >> $GUESS_CUSTOM_HOME/script-configs-backup/custom-variables
  cat $OLD_SCRIPTS_FOLDER/config/variables.cfg | grep CUSTOM_HOME= >> $GUESS_CUSTOM_HOME/script-configs-backup/custom-variables
  cat $OLD_SCRIPTS_FOLDER/config/variables.cfg | grep CUSTOM_USER= >> $GUESS_CUSTOM_HOME/script-configs-backup/custom-variables
  cat $OLD_SCRIPTS_FOLDER/config/variables.cfg | grep NODE_KEYS_LOCATION= >> $GUESS_CUSTOM_HOME/script-configs-backup/custom-variables
  cat $OLD_SCRIPTS_FOLDER/config/variables.cfg | grep GITHUBTOKEN= >> $GUESS_CUSTOM_HOME/script-configs-backup/custom-variables
  cat $OLD_SCRIPTS_FOLDER/config/variables.cfg | grep IDENTITY= >> $GUESS_CUSTOM_HOME/script-configs-backup/custom-variables
  cat $OLD_SCRIPTS_FOLDER/config/variables.cfg | grep NODE_EXTRA_FLAGS= >> $GUESS_CUSTOM_HOME/script-configs-backup/custom-variables

  echo -e
  echo -e "${GREEN}Your old elrond-go-scripts saved variables are:${NC}"
  echo -e
  echo -e "$(<$GUESS_CUSTOM_HOME/script-configs-backup/custom-variables)"
  echo -e

  #prepare the CUSTOM_HOME var so the load of the variables can be achieved
  CUSTOM_HOME=$GUESS_CUSTOM_HOME
}
